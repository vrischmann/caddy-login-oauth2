// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// Assets statically implements the virtual filesystem provided to vfsgen.
var Assets = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 12, 15, 37, 4, 823143803, time.UTC),
		},
		"/login.html": &vfsgen۰CompressedFileInfo{
			name:             "login.html",
			modTime:          time.Date(2019, 5, 12, 18, 20, 55, 821436977, time.UTC),
			uncompressedSize: 870,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x53\xc1\x8a\xdb\x30\x10\xbd\xfb\x2b\xa6\x82\xb2\x97\x38\xde\xb4\x14\x4a\xd6\x32\x94\xed\x36\x14\x0a\x0d\x34\x29\xdd\xa3\x62\x8d\xad\x01\x59\x72\xe5\x89\xd3\x10\xfc\xef\x45\x71\x9a\x4d\xda\x54\x17\x4b\x7a\x9e\xf7\x66\xde\x8c\xf2\x57\x1f\xbf\x3e\xae\x9e\x97\x4f\x60\xb8\xb1\x45\x92\xc7\x0f\x58\xe5\x6a\x29\xd0\x89\x22\x49\x72\x83\x4a\x17\x09\x00\x40\xde\x20\x2b\x28\x8d\x0a\x1d\xb2\x14\xeb\xd5\xa7\xf4\xbd\xb8\x84\x9c\x6a\x50\x8a\x9e\x70\xd7\xfa\xc0\x02\x4a\xef\x18\x1d\x4b\xb1\x23\xcd\x46\x6a\xec\xa9\xc4\xf4\x78\x98\x00\x39\x62\x52\x36\xed\x4a\x65\x51\xce\xa6\xf7\x57\x54\x86\xb9\x4d\xf1\xe7\x96\x7a\x29\x7e\xa4\xeb\x0f\xe9\xa3\x6f\x5a\xc5\xb4\xb1\x78\xc1\x4b\x28\x51\xd7\xf8\x27\x92\x89\x2d\x16\x5f\x7c\x4d\x0e\x96\xc1\x37\x2d\xe7\xd9\x78\x97\x8c\x3f\x74\xbc\xb7\x08\xbc\x6f\x51\x0a\xc6\x5f\x9c\x95\x5d\x77\x0a\x8e\x6b\xe3\xf5\x1e\x0e\xe7\x63\x5c\x95\x77\x9c\x56\xaa\x21\xbb\x9f\xc3\xdd\x37\xac\x3d\xc2\xfa\xf3\xdd\x04\x56\xca\xf8\x46\x4d\x60\x81\x0e\x7b\x35\x81\xef\x18\xb4\x72\x6a\x02\x9d\x72\x5d\xda\x61\xa0\xea\xe1\xcc\x34\x24\xe7\xed\x34\x26\xaf\xc8\x61\xf8\x4b\xe9\x68\xcb\x1c\xde\xdd\xbf\x7e\xb8\xba\x6f\x54\xa8\xc9\xa5\x16\x2b\x9e\x83\xda\xb2\xbf\x09\x07\xaa\xcd\x3f\xf8\x6d\xd9\xcd\x96\xd9\xbb\xdb\xea\xb3\xfb\xff\xc8\xb3\x6f\xe7\xf0\x06\x9b\x6b\xd0\x92\xc3\xd4\xe0\xa8\xfd\xf6\x12\x1d\x46\xc3\xb3\xa3\xe3\x71\x8c\xb2\x71\x8e\x92\x3c\x9a\x7c\xea\x97\xa6\x1e\x4a\xab\xba\x4e\x8a\x73\x7a\x17\xed\xc8\xcd\xac\x78\xf6\x5b\xd8\x91\xb5\xb0\x41\x08\xa8\x29\x60\xc9\xa8\x81\x3d\x1c\x0e\xd3\x65\xf0\x3d\x69\x0c\xc3\x00\x95\x0f\xb1\x78\x83\x8e\xa9\x54\x4c\xde\xe5\x99\x99\x15\x2f\x06\xe4\x95\x0f\x0d\xa8\x32\x42\x52\x1c\x0e\x30\x3d\xce\xc9\x52\xb1\x81\x61\xc8\x6a\x2f\xa0\x41\x36\x5e\x4b\xb1\x78\x5a\x5d\x64\x71\x0c\x1e\x3d\x2b\x16\x3e\xcf\x4e\xdb\x17\xe2\x2c\x32\x9f\x2a\xca\x34\xf5\x45\x92\x67\x63\x91\xb1\xea\xf8\xac\x7e\x07\x00\x00\xff\xff\x01\x48\x55\xfa\x66\x03\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/login.html"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
